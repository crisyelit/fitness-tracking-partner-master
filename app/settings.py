"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 3.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
import dj_email_url
from pathlib import Path

from django.utils.translation import ugettext_lazy as _

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', '')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True if os.environ.get('DEBUG', 'dev') != 'prod' else False

ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", '').split(" ")
# Application definition

INSTALLED_APPS = [
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
	'django.contrib.humanize',
	'django.contrib.sites',
	'django.contrib.sitemaps',
	'django.contrib.flatpages',
	'django.forms',

	'corsheaders',
	'rest_framework',
	'oauth2_provider',
	'django_extensions',
	'storages',

	'celery',
	'django_celery_results',
	'django_celery_beat',

	'crispy_forms',
	'django_elasticsearch_dsl',
	'django_log_to_telegram',
	# 'django_tables2',
	# 'django_filters',

	'apps.core',
	'apps.accounts',
	'apps.dashboard',
	'apps.training',

	# 'apps.emails',
	# 'apps.leads',
]

CORS_ALLOW_ALL_ORIGINS = True
LOG_TO_TELEGRAM_BOT_TOKEN = os.environ.get('LOG_TO_TELEGRAM_BOT_TOKEN')

if not DEBUG:
	LOGGING = {
		'version': 1,
		'disable_existing_loggers': False,
		 'filters': {
			'require_debug_false': {
				'()': 'django.utils.log.RequireDebugFalse'
			}
		},
		'handlers': {
			'telegram_log': {
				'level': 'ERROR',
				# 'filters': ['require_debug_false'],
				'class': 'django_log_to_telegram.log.AdminTelegramHandler',
				'bot_token': LOG_TO_TELEGRAM_BOT_TOKEN,
			}
		},
		'loggers': {
			'django.request': {
				'handlers': ['telegram_log'],
				'level': 'ERROR',
				'propagate': True,
			},
		},
	}

CACHES = {
	"default": {
		"BACKEND": "django_redis.cache.RedisCache",
		"LOCATION": os.environ.get('REDIS_URL', 'redis://redis:6379/0'),
		"OPTIONS": {
			"CLIENT_CLASS": "django_redis.client.DefaultClient"
		},
		"KEY_PREFIX": "example"
	}
}
CACHE_TTL = 60 * 15

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

CELERY_BROKER_URL = os.environ.get('REDIS_URL', 'redis://redis:6379/0')
CELERY_RESULT_BACKEND = 'django-db'

ELASTICSEARCH_DSL = {
    'default': {
        'hosts': os.environ.get("ELASTICSEARCH_DSL_HOSTS", 'localhost:9200')
    },
}

OAUTH2_PROVIDER = {
    # this is the list of available scopes
    'SCOPES': {'read': 'Read scope', 'write': 'Write scope'}
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
    )
}

MIDDLEWARE = [
	'django.middleware.security.SecurityMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'oauth2_provider.middleware.OAuth2TokenMiddleware',
	'corsheaders.middleware.CorsMiddleware',
	'django.middleware.common.CommonMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',
	'django.middleware.locale.LocaleMiddleware',
	'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware'
]

CRISPY_TEMPLATE_PACK = 'bootstrap4'

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS': [os.path.join(BASE_DIR, 'templates')],
		'APP_DIRS': True,
		'OPTIONS': {
			'context_processors': [
				'django.template.context_processors.debug',
				'django.template.context_processors.request',
				'django.contrib.auth.context_processors.auth',
				'django.contrib.messages.context_processors.messages',
				'apps.accounts.context_processor.leaders_renderer',
			],
		},
	},
]

SEEDS = {
	'accounts' : 'apps.accounts.seeds',
	
}

LOGOUT_REDIRECT_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/dashboard/'
AUTH_USER_MODEL = 'accounts.User'

WSGI_APPLICATION = 'app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
	'default': {
		'ENGINE': 'django.db.backends.postgresql_psycopg2',
		'NAME': os.environ.get('PG_NAME', 'geoshop'),
		'USER': os.environ.get('PG_USER', 'postgres'),
		'PASSWORD': os.environ.get('PG_PASSWORD', 'asdw1235'),
		'HOST': os.environ.get('PG_HOST', '127.0.0.1'),
		'PORT': os.environ.get('PG_PORT', '5432'),
	}
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{
		'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	},
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LOCALE_PATHS = [os.path.join(BASE_DIR, 'locale'), 'locale']

LANGUAGES = [
	('es', _('Spanish')),
]

TIME_ZONE = 'America/Caracas'

# See: https://docs.djangoproject.com/en/dev/ref/settings/#language-code
LANGUAGE_CODE = 'es'

# See: https://docs.djangoproject.com/en/dev/ref/settings/#site-id
SITE_ID = 1

# See: https://docs.djangoproject.com/en/dev/ref/settings/#use-i18n
USE_I18N = True

# See: https://docs.djangoproject.com/en/dev/ref/settings/#use-l10n
USE_L10N = True

# See: https://docs.djangoproject.com/en/dev/ref/settings/#use-tz
USE_TZ = True


# Define los lugares adicionales de la aplicacion staticfiles
STATICFILES_DIRS = [
	BASE_DIR / 'static'
]

USE_S3 = os.environ.get('USE_S3', 'FALSE') == 'TRUE'

if USE_S3:
	# aws settings
	AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
	AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
	AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME')
	AWS_DEFAULT_ACL = None
	AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
	AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
	# s3 static settings
	STATIC_LOCATION = 'static'
	STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{STATIC_LOCATION}/'
	STATICFILES_STORAGE = 'utils.storage_backends.StaticStorage'
	# s3 public media settings
	PUBLIC_MEDIA_LOCATION = 'media'
	MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{PUBLIC_MEDIA_LOCATION}/'
	DEFAULT_FILE_STORAGE = 'utils.storage_backends.PublicMediaStorage'
else:
	STATIC_URL = '/static/'
	STATIC_ROOT = os.path.join(BASE_DIR, "static-root")
	MEDIA_URL = '/media/'
	MEDIA_ROOT = os.path.join(BASE_DIR, "media-root")


EMAIL_URL = os.environ.get("EMAIL_URL", 'smtp:localhost')

email_config = dj_email_url.parse(EMAIL_URL)

EMAIL_FILE_PATH = email_config["EMAIL_FILE_PATH"]
EMAIL_HOST_USER = email_config["EMAIL_HOST_USER"]
EMAIL_HOST_PASSWORD = email_config["EMAIL_HOST_PASSWORD"]
EMAIL_HOST = email_config["EMAIL_HOST"]
EMAIL_PORT = email_config["EMAIL_PORT"]
EMAIL_BACKEND = email_config["EMAIL_BACKEND"]
EMAIL_USE_TLS = email_config["EMAIL_USE_TLS"]
EMAIL_USE_SSL = email_config["EMAIL_USE_SSL"]


